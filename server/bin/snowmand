#!/usr/bin/python
"""
The main server-daemon for the snowman. This program starts the xmlrpc-server
used by the clients to connect to the central server.
"""

import datetime
import logging
import os
import sys
import thread
import time

pidfile = open("/var/run/snowman/snowmand.pid", "w")
pidfile.write("%d" % os.getpid())
pidfile.close()

sys.path.append("/usr/share/snowman/")

# Tell where to find the DJANGO settings.
os.environ.setdefault("DJANGO_SETTINGS_MODULE", "srm.settings")
from django.contrib.auth.models import User

from core.models import Generator, Sensor, Rule, RuleSet, RuleClass, RuleReferenceType, RuleReference
from tuning.models import Suppress, SuppressAddress, DetectionFilter, EventFilter
from tuning.tools import getEventFilter, getDetectionFilter, getSuppress
from util.config import Config
from util.xmlrpcserver import RPCServer

cache = {}
timeOut = int(Config.get("xmlrpc-server", "client-timeout"))

def requireAuth(function):
	"""Decorator for methods where it is required that the client is authenticated to use it.
	Checks if the token is found in the cache, and that it is new enough.
	
	If everything is fine, the function is called. Otherwise, a status=False and a 
	status-message is returned."""

	def inner(*args):
		if(len(args) <= 1):
			return {'status': False, 'message': "No token supplied"}
		elif(args[1] not in cache['session']):
			return {'status': False, 'message': "Invalid token"}
		elif(datetime.datetime.now() > cache['session'][args[1]]['time'] + datetime.timedelta(seconds=timeOut)):
			cache['session'].pop(args[1])
			return {'status': False, 'message': "Token has timed out."}
		else:
			cache['session'][args[1]]['time'] = datetime.datetime.now()
			return function(*args)
	return inner

class RPCInterface():
	"""The interface-class used by the xmlrpc-server to handle all requests.
	methods which should be available externally should all be defined here."""

	def __init__(self):
		import string
		self.python_string = string
	
	def authenticate(self, sensorname, secret):
		"""Method which authenticates a sensor. sensorname and secret are both strings, and
		are checked up against the authentication of the User related to a sensor.
		
		If everything is well, a token is delivered to the client which identifies this conversation
		with later method-calls."""
		d = {}
		# Set the status-flag to false, as we are not authenticated yet.
		d['status'] = False

		# Try to grab the sensor. If it fails, return a failure.
		try:
			sensor = Sensor.objects.get(name=sensorname)
		except Sensor.DoesNotExist:
			d['message'] = "Sensor does not exist"
			return d
		
		# Try to verify the secret. If it fails, return a failure.
		if(sensor.user.check_password(secret) == False):
			d['message'] = "Secret is incorrect"
			return d
		
		# If we have not returned yet, authentication was successful. We then generates a token, 
		# and sets up the cache-structure for this conversation.
		# We also updates the last_login time.
		d['status'] = True
		d['token'] = str(sensor.id) + "-" + User.objects.make_random_password()
		d['sensorID'] = sensor.id
		
		cache['session'][d['token']] = {}
		cache['session'][d['token']]['time'] = datetime.datetime.now()
		cache['session'][d['token']]['sensor'] = sensor
		
		sensor.user.last_login = datetime.datetime.now()
		sensor.user.save()

		return d
	
	@requireAuth
	def deAuthenticate(self, token):
		"""This method deauthenticates a sensor, and destroys the cache for that conversation."""
		cache['session'].pop(token)
		return {'status': True, 'message': "Sessiontoken is destroyed."}
	
	@requireAuth
	def getRuleClasses(self, token):
		"""This method collects all RuleClasses from the database, and returns them in a dict."""
		classes = {}
		for rc in RuleClass.objects.all():
			c = {}
			c['classtype'] = rc.classtype
			c['description'] = rc.description
			c['priority'] = rc.priority
			classes[rc.classtype] = c
		
		return {'status': True, 'classes': classes}
	
	@requireAuth
	def getGenerators(self, token):
		"""This method collects all Generators from the database, and returns them in a dict."""
		generators = {}
		for generator in Generator.objects.all():
			g = {}
			g['GID'] = generator.GID
			g['alertID'] = generator.alertID
			g['message'] = generator.message
			generators[str(generator.GID) + "-" + str(generator.alertID)] = g
		return {'status': True, 'generators': generators}
	
	@requireAuth
	def getReferenceTypes(self, token):
		"""This method collects all ReferenceTypes from the database, and returns them in a dict."""
		referenceTypes = {}
		for rt in RuleReferenceType.objects.all():
			ref = {}
			ref['name'] = rt.name
			ref['urlPrefix'] = rt.urlPrefix
			referenceTypes[rt.name] = ref
		
		return {'status': True, 'referenceTypes': referenceTypes}
	
	@requireAuth
	def getRuleRevisions(self, token):
		"""This method collects all the rules a certain sensor is supposed to have. It collects all the
		rulesets, and from there collects all the SID/rev pairs from them.
		The SID/rev information is then returned to the sensor."""
		sensor = cache['session'][token]['sensor']
		
		activeRules = {}
		for ruleSet in sensor.ruleSets.all():
			if(ruleSet.active):
				activeRules.update(ruleSet.getRuleRevisions(True))
		
		rulerevisions = {}
		for sid in activeRules:
			rulerevisions[sid] = activeRules[sid]['rev'].rev
		
		cache['session'][token]['rules'] = activeRules
		cache['session'][token]['rulerevisions'] = rulerevisions
		
		return {'status': True, 'revisions': rulerevisions}
	
	@requireAuth
	def getRuleSets(self, token):
		"""This method collects a list over the RuleSets a sensor should have, and returns to the sensor."""
		sensor = cache['session'][token]['sensor']

		sets = []
		rulesets = {}

		# Collect all the rulesets.
		for rs in sensor.ruleSets.all():
			if(rs.active):
				sets.append(rs)
				sets.extend(rs.getChildSets())
		
		# Structure them in a dict (hashmap, so duplicates are removed )
		for rs in sets:
			ruleset = {}
			ruleset['name'] = rs.name
			ruleset['description'] = rs.description 
			rulesets[rs.name] = ruleset

		return {'status': True, 'rulesets': rulesets}
	
	@requireAuth
	def getRules(self, token, rulelist):
		"""This method recieves a list of SID's, and then simply collects them from the database, and returns
		them to the client. This way, the client have a way of only requesting the revisions that is new."""
		maxRequestSize = int(Config.get("xmlrpc-server", "max-requestsize"))
		if(len(rulelist) > maxRequestSize):
			raise Exception("Cannot request more than %d rules" % maxRequestSize)
		
		rules = {}
		sensor = cache['session'][token]['sensor']

		# For every  sid in the list:
		for r in rulelist:
			try:
				rule = cache['session'][token]['rules'][str(r)]['rule']
				rev = cache['session'][token]['rules'][str(r)]['rev']
			except KeyError:
				# Fetch the rule from the database, and collect the basic parametres from the rule.
				rule = Rule.objects.get(SID=r)
				rev = rule.revisions.last()

			dictRule = {}
			dictRule['SID'] = rule.SID
			dictRule['rev'] = rev.rev
			dictRule['msg'] = rev.msg
			dictRule['raw'] = rev.raw
			dictRule['ruleset'] = rule.ruleSet.name
			dictRule['ruleclass'] = rule.ruleClass.classtype
			dictRule['references'] = rev.getReferences()
			
			# Grab the tuning-parametres.
			eventFilter = getEventFilter(sensor, rule)
			detectionFilter = getDetectionFilter(sensor, rule)
			suppress = getSuppress(sensor, rule)
				
			## If an event-filter was found, add it to the rule we are sending to the sensor
			#if eventFilter:
			#	dictRule['eventFilter'] = {}
			#	dictRule['eventFilter']['type'] = eventFilter.eventFilterType
			#	dictRule['eventFilter']['track'] = eventFilter.track
			#	dictRule['eventFilter']['count'] = eventFilter.count
			#	dictRule['eventFilter']['seconds'] = eventFilter.seconds
			#
			# If an detectionfilter was found, add it to the rule.
			#if detectionFilter:
			#	dictRule['detectionFilter'] = {}
			#	dictRule['detectionFilter']['track'] = detectionFilter.track
			#	dictRule['detectionFilter']['count'] = detectionFilter.count
			#	dictRule['detectionFilter']['seconds'] = detectionFilter.seconds
			#
			# If a supress is found, add it to the rule.
			#if suppress:
			#	dictRule['suppress'] = {}
			#	dictRule['suppress']['track'] = suppress.track
			#	dictRule['suppress']['addresses'] = suppress.getAddresses()
			
			rules[str(rule.SID)] = dictRule
		
		return {'status': True, 'rules': rules}
	
	@requireAuth
	def ping(self, token):
		"""Simple function, used to test if we can reach the server"""
		return {'status': True, 'Message': "Pong!"}
	
	@requireAuth
	def getFilters(self, token):
		s=cache['session'][token]['sensor']
		try:
			sids = cache['session'][token]['rulerevisions'].keys()
		except KeyError:
			self.getRuleRevisions(token)
			sids = cache['session'][token]['rulerevisions'].keys()
		
		dFilters = {}
		eFilters = {}
		suppress = {}

		while s:
			for f in DetectionFilter.objects.filter(sensor=s).filter(rule__SID__in=sids).all():
				if str(f.rule.SID) not in dFilters:
					dFilters[str(f.rule.SID)] = {}
					dFilters[str(f.rule.SID)]['track'] = f.track
					dFilters[str(f.rule.SID)]['count'] = f.count
					dFilters[str(f.rule.SID)]['seconds'] = f.seconds
			
			for e in EventFilter.objects.filter(sensor=s).filter(rule__SID__in=sids).all():
				if str(e.rule.SID) not in eFilters:
					eFilters[str(e.rule.SID)] = {}
					eFilters[str(e.rule.SID)]['track'] = e.track
					eFilters[str(e.rule.SID)]['count'] = e.count
					eFilters[str(e.rule.SID)]['seconds'] = e.seconds
					eFilters[str(e.rule.SID)]['type'] = e.eventFilterType
			
			for su in Suppress.objects.filter(sensor=s).filter(rule__SID__in=sids).all():
				if str(su.rule.SID) not in suppress:
					suppress[str(su.rule.SID)] = {}
					suppress[str(su.rule.SID)]['track'] = su.track
					suppress[str(su.rule.SID)]['addresses'] = su.getAddresses()
			
			s = s.parent
		
		return {'status': True, 'eventFilters': eFilters, 'detectionFilters': dFilters, 'suppresses': suppress}
				
	
def startRPCServer():
	"""Starts the RPC-Server. This method blocks."""
	bindAddress = Config.get("xmlrpc-server", "address")
	bindPort = int(Config.get("xmlrpc-server", "port"))
	
	for s in ['session']:
		cache[s] = {}
	
	server_address = (bindAddress, bindPort) # (address, port)
	server = RPCServer(RPCInterface(), server_address)	
	sa = server.socket.getsockname()

	print "Serving HTTPS on", sa[0], "port", sa[1]
	server.startup()

if __name__ == '__main__':
	# Start the server in its own thread
	thread.start_new_thread(startRPCServer, ())
	
	# Check the sensor-status.
	while True:
		Sensor.refreshStatus()
		time.sleep(60)
