#!/usr/bin/python
"""
	This scripts looks into the snowman-update cronfile, which controls
	the scheduling of updates, and synchronizes this file with the configuration
	from the database.
	This script should be called on a regular basis to perform its function.
	(In the default snowman-installation, this script is called every other
	minute by cron.
"""

import os
import sys
import re
import logging

sys.path.append("/usr/share/snowman/")
os.environ.setdefault("DJANGO_SETTINGS_MODULE", "srm.settings")
from update.models import Source
logger = logging.getLogger(__name__)

sources = {}
cronPattern = re.compile(r"(([0-9*]+) ([0-9*]+) ([0-9*]+) ([0-9*]+) ([0-9*]+))")
linePattern = re.compile(r"(([0-9*]+) ([0-9*]+) ([0-9*]+) ([0-9*]+) ([0-9*]+)) www-data /usr/bin/snowman-update (\d+)")

# Grab whats supposed to be the config from the database
for source in Source.objects.all():
	match = cronPattern.match(source.schedule)
	if(match):
		sources[str(source.id)] = match.groups()

# Grab the current config from the configfile, and determine if it is the same
# that is in the configfile.
cronfile = open("/etc/cron.d/snowman-update", "r")
changed = False
for line in cronfile:
	match = linePattern.match(line)
	if(match):
		try:
			if(match.group(1) != sources[match.group(7)][0]):
				changed = True
		except KeyError:
			changed = True
		
# If the config have changed, update the cron-file.
if changed:
	logger.info("Updating the cron-file")
	cronfile = open("/etc/cron.d/snowman-update", "w")
	cronfile.write("# This file is auto-generated by snowman\n\n")
	for source in sources:
		cronfile.write("%s www-data /usr/bin/snowman-update %s\n" % (sources[source][0], source))
	cronfile.close()
