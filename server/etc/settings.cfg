# Configures the applications logging. Severity defines how severe an event should
# be before it is logged. Possible values are:
#   - CRITICAL, ERROR, WARNING, INFO, DEBUG
[logging]
logfile: /tmp/srm-server.log
severity: DEBUG
djangoSeverity: INFO

[xmlrpc-server]
address: 0.0.0.0
port: 13471
keyfile: etc/xmlrpc.key.pem
certfile: etc/xmlrpc.pem
client-timeout: 600
max-requestsize: 250

[sensor]
port: 13472
pingTimeout: 3

[storage]
inputFiles: /tmp/srm/input/
outputFiles: /tmp/srm/output/
createIfNotExists: true

[update]

# Specify the maximum number of revisions stored per rule.
# Old revisions are automatically deleted when this limit is reached.
# 0 = infinity.
maxRevisions: 2

# Specify whether a new rule revision should activate automatically.
# A rule will always use the newest revision which is active.
# When set to false, new revisions are added but kept deactivated, 
# meaning that any preceding active revisions will be used.
activateNewRevisions: true

# Put rule in new ruleset automatically if this is changed by source:
changeRuleset: false

# Overwrite existing default filter.
# 'sometimes' will overwrite filters set by SYSTEM only.
# Values: always|sometimes|never
overwriteFilters: always 

# From where do we collect the alert message associated to a rule, if the
# message in the rule-string is different from the message in sid-msg.map.
# Values: sidmsg|rule|first
ruleMessageSource: sidmsg

[files]
# There is no specific filename convention for Snort(R) configuration
# files, however, they do seem to follow a de facto standard (e.g. most 
# update sources will put all classification configurations into 
# 'classification.config'. These de facto filenames can be used by Snowman
# to make parsing of an update more effective by parsing files in the
# order which is most effective for database transactions, and also to
# save processing by only parsing the necessary files. To do this, set
# the useFileNames parameter to true, and specify the filenames (see below).
# If useFileNames is set to false, Snowman will parse every file in an update
# and use regex matching to extract known entities from the files. Note that
# with the latter option, a file can contain various types of entities.
 
useFileNames: true

# If useFileNames is set to true, filenames must also be specified.
# The following entities are currently supported:
# -classifications (specified by parameter classificationFile)
# -generators (specified by parameter genMsgFile)
# -referencetypes (specified by parameter referenceConfigFile)
# -sid messages (specified by parameter sidMsgFile)
# -rules (specified by parameter ruleExt)

classificationFile: classification.config
genMsgFile: gen-msg.map
referenceConfigFile: reference.config
sidMsgFile: sid-msg.map
filterFile: threshold.conf
ruleExt: .rules

# If useFileNames is set to false, the skipExt option can be used to exclude
# files with certain extensions from parsing:
skipExt: .c, .h, .so, .pl
