import datetime
from django.test import TestCase

from core.models import Rule, RuleRevision, Generator, RuleClass, RuleSet, Sensor, RuleReferenceType
from update.models import Source, Update
from tuning.models import DetectionFilter, EventFilter

from update.tasks import UpdateTasks

class Test(TestCase):

	def setUp(self):
		# Create source and update objects
		try:
			source = Source.objects.get(name="Manual")
		except Source.DoesNotExist:
			source = Source.objects.create(name="Manual", schedule="00:00", url="", lastMd5="")

		self.update = Update.objects.create(time=datetime.datetime.now(), source=source)
		
		self.msg = "This is a sample message"
		self.filters = 'detection_filter:track by_src, count 30, seconds 60;threshold:type both, track by_dst, count 10, seconds 60;'
		
		self.rulestring = 'alert tcp any any -> any 21 (\
						msg:"'+self.msg+'"; \
						reference:arachnids,IDS287; reference:bugtraq,1387; reference:cve,CAN-2000-1574; \
						classtype: example-classtype; \
						priority:10; \
						'+self.filters+' \
						metadata:foo bar, ruleset community, bar 1; \
						gid:1; sid:2000000; rev:10)'
						
		self.raw = " ".join('alert tcp any any -> any 21 (\
						msg:"This is a sample message"; \
						reference:arachnids,IDS287; reference:bugtraq,1387; reference:cve,CAN-2000-1574; \
						classtype: example-classtype; \
						priority:10; \
						metadata:foo bar, ruleset community, bar 1; \
						gid:1; sid:2000000; rev:10)'.split())
		
		self.allSensors = Sensor.objects.create(id=1, name="All Sensors")
				
		try:
			rule = Rule.objects.get(SID=2000000)
			rule.delete()
		except Rule.DoesNotExist:
			pass


	def tearDown(self):
		pass


	def test_updateRule(self):
		# Insert the rule
		self.update.updateRule(self.rulestring, "example.rules")
		
		try:
			# Verify that all related objects exist
			rule = Rule.objects.get(SID=2000000, active=True, priority=10)
			generator = rule.generator
			ruleset = rule.ruleSet
			ruleclass = rule.ruleClass
			revision = rule.revisions.get(rev=10)
			detectionFilter = rule.detectionFilters.get(sensor=self.allSensors)
			eventFilter = rule.eventFilters.get(sensor=self.allSensors)
		except Rule.DoesNotExist:
			self.fail("Rule does not exist")
		except Generator.DoesNotExist:
			self.fail("Generator does not exist")
		except RuleSet.DoesNotExist:
			self.fail("RuleSet does not exist")
		except RuleClass.DoesNotExist:
			self.fail("RuleClass does not exist")
		except RuleRevision.DoesNotExist:
			self.fail("RuleRevision does not exist")
		except DetectionFilter.DoesNotExist:
			self.fail("DetectionFilter does not exist")
		except EventFilter.DoesNotExist:
			self.fail("EventFilter does not exist")	
		
		self.assertTrue(rule.active==True)
		self.assertTrue(int(rule.priority)==10)
		
		# Check revision object:
		# 1: Check that filters are extracted
		self.assertTrue(revision.raw==self.raw)
		self.assertTrue(revision.msg==self.msg)
		self.assertTrue(revision.active==True)
		self.assertTrue(revision.filters==self.filters)
		
		self.assertTrue(generator.GID==1)
		self.assertTrue(ruleset.name=="community")
		self.assertTrue(ruleclass.classtype=="example-classtype", "value was "+ruleclass.classtype)
		
		self.assertTrue(detectionFilter.track==EventFilter.SOURCE)
		self.assertTrue(detectionFilter.count==30)
		self.assertTrue(detectionFilter.seconds==60)
		
		self.assertTrue(eventFilter.eventFilterType==EventFilter.BOTH)
		self.assertTrue(eventFilter.track==EventFilter.DESTINATION)
		self.assertTrue(eventFilter.count==10)
		self.assertTrue(eventFilter.seconds==60)		
		
	def test_processFolder(self):
		UpdateTasks.processFolder(path="update", update=self.update)
		
		# Check generator
		generator = Generator.objects.get(GID=1, alertID=1, message="snort general alert")
		print repr(generator)
		
		# Check reference type
		RuleReferenceType.objects.get(name="bugtraq", urlPrefix="http://www.securityfocus.com/bid/")
		
		# Get reference types generated by rule
		rtArachnids = RuleReferenceType.objects.get(name="arachnids")
		rtUrl = RuleReferenceType.objects.get(name="url")
		
		# Get rule and revision
		rule = Rule.objects.get(SID=2000000)
		ruleRevision = rule.revisions.get(rev=10, msg="DELETED BACKDOOR subseven 22")
		
		# Check rule references 	
		ruleRevision.references.get(reference="485",referenceType=rtArachnids)
		ruleRevision.references.get(reference="www.hackfix.org/subseven/",referenceType=rtUrl)
		
		# Check filter
		rule.eventFilters.get(sensor=self.allSensors, eventFilterType=EventFilter.LIMIT, track=EventFilter.SOURCE, count=1, seconds=60)
		
# 	def test_weirdRule(self):
# 		rule = self.update.updateRule('alert udp any 53 -> ![$DNS_SERVERS,$SMTP_SERVERS] any (msg:"ET POLICY Unusual number of DNS No Such Name Responses"; content:"|83|"; offset:3; depth:1; threshold: type both , track by_dst, count 50, seconds 300; reference:url,doc.emergingthreats.net/2003195; classtype:bad-unknown; sid:2003195; rev:5;)', "example2.rules")
# 		rule.revisions.get(rev=5)
# 		
# 	def test_deleteRevisions(self):
# 		self.update.updateRule('alert udp any 53 -> ![$DNS_SERVERS,$SMTP_SERVERS] any (msg:"ET POLICY Unusual number of DNS No Such Name Responses"; content:"|83|"; offset:3; depth:1; threshold: type both , track by_dst, count 50, seconds 300; reference:url,doc.emergingthreats.net/2003195; classtype:bad-unknown; sid:2003195; rev:1;)', "example.rules")
# 		self.update.updateRule('alert udp any 53 -> ![$DNS_SERVERS,$SMTP_SERVERS] any (msg:"ET POLICY Unusual number of DNS No Such Name Responses"; content:"|83|"; offset:3; depth:1; threshold: type both , track by_dst, count 50, seconds 300; reference:url,doc.emergingthreats.net/2003195; classtype:bad-unknown; sid:2003195; rev:2;)', "example.rules")
# 		self.update.updateRule('alert udp any 53 -> ![$DNS_SERVERS,$SMTP_SERVERS] any (msg:"ET POLICY Unusual number of DNS No Such Name Responses"; content:"|83|"; offset:3; depth:1; threshold: type both , track by_dst, count 50, seconds 300; reference:url,doc.emergingthreats.net/2003195; classtype:bad-unknown; sid:2003195; rev:3;)', "example.rules")
# 		self.update.updateRule('alert udp any 53 -> ![$DNS_SERVERS,$SMTP_SERVERS] any (msg:"ET POLICY Unusual number of DNS No Such Name Responses"; content:"|83|"; offset:3; depth:1; threshold: type both , track by_dst, count 50, seconds 300; reference:url,doc.emergingthreats.net/2003195; classtype:bad-unknown; sid:2003195; rev:4;)', "example.rules")
# 		self.update.updateRule('alert udp any 53 -> ![$DNS_SERVERS,$SMTP_SERVERS] any (msg:"ET POLICY Unusual number of DNS No Such Name Responses"; content:"|83|"; offset:3; depth:1; threshold: type both , track by_dst, count 50, seconds 300; reference:url,doc.emergingthreats.net/2003195; classtype:bad-unknown; sid:2003195; rev:5;)', "example.rules")
# 			
# 		rule = Rule.objects.get(SID=2003195)
# 		
# 		self.assertTrue(rule.revisions.count() == 2)